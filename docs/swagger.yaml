basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      usr_email:
        type: string
      usr_id:
        type: integer
      usr_name:
        type: string
    type: object
  models.Task_Request:
    properties:
      tks_deadline_date:
        type: string
      tsk_color:
        type: string
      tsk_description:
        type: string
      tsk_name:
        type: string
      tskpr_id:
        type: integer
      tsksk_id:
        type: integer
      usr_id:
        type: integer
    type: object
  models.Tb_Task:
    properties:
      tks_deadline_date:
        type: string
      tsk_color:
        type: string
      tsk_creation_date:
        type: string
      tsk_description:
        type: string
      tsk_id:
        type: integer
      tsk_name:
        type: string
      tsk_update_date:
        type: string
      tskpr_id:
        type: integer
      tsksk_id:
        type: integer
      usr_id:
        type: integer
    type: object
  models.Tb_Task_priority:
    properties:
      tskpr_id:
        type: integer
      tskpr_name:
        type: string
    type: object
  models.Tb_Task_status:
    properties:
      tskst_id:
        type: integer
      tskst_name:
        type: string
    type: object
  models.UserDTO:
    properties:
      usr_email:
        type: string
      usr_name:
        type: string
      usr_password:
        type: string
    type: object
  models.UserResponse:
    properties:
      usr_email:
        type: string
      usr_id:
        type: integer
      usr_name:
        type: string
    type: object
  repositories.Task_priority:
    type: object
  repositories.Task_status:
    type: object
  repositories.TaskRepository:
    type: object
  repositories.User:
    type: object
info:
  contact: {}
  description: API RESTful em Go
  title: To-Do List Golang API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login authenticates a user
      parameters:
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Authenticate a user
      tags:
      - auth
  /priorities:
    get:
      consumes:
      - application/json
      description: GetPriorities returns all priorities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repositories.Task_priority'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all priorities
      tags:
      - priorities
  /priority/{tskpr_id}:
    get:
      consumes:
      - application/json
      description: GetPriority returns a priority by ID
      parameters:
      - description: Priority ID
        in: path
        name: tskpr_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tb_Task_priority'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get priority by ID
      tags:
      - priorities
  /status:
    get:
      consumes:
      - application/json
      description: GetAllStatus returns all status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repositories.Task_status'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all status
      tags:
      - status
  /status/{tskst_id}:
    get:
      consumes:
      - application/json
      description: GetStatus returns a status by ID
      parameters:
      - description: Status ID
        in: path
        name: tskst_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tb_Task_status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get status by ID
      tags:
      - status
  /task:
    get:
      consumes:
      - application/json
      description: GetTask returns all task
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repositories.TaskRepository'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all task
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: CreateTask creates a new task
      parameters:
      - description: Task_Request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task_Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tb_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new task
      tags:
      - tasks
  /task/{task_id}:
    delete:
      consumes:
      - application/json
      description: DeleteTask deletes a task by ID
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a task by ID
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: GetTask returns a task by ID
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tb_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: UpdateTask updates an existing task by ID
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      - description: Task_Request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task_Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tb_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing task
      tags:
      - tasks
  /user:
    post:
      consumes:
      - application/json
      description: CreateUser creates a new user
      parameters:
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /user/{user_id}:
    delete:
      consumes:
      - application/json
      description: DeleteUser deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: GetUser returns a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repositories.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: UpdateUser updates an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: GetUsers returns all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repositories.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
