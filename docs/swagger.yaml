basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      usr_email:
        type: string
      usr_id:
        type: integer
      usr_name:
        type: string
    type: object
  models.UserDTO:
    properties:
      usr_email:
        type: string
      usr_name:
        type: string
      usr_password:
        type: string
    type: object
  models.UserResponse:
    properties:
      usr_email:
        type: string
      usr_id:
        type: integer
      usr_name:
        type: string
    type: object
  repositories.User:
    type: object
info:
  contact: {}
  description: API RESTful em Go
  title: To-Do List Golang API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login authenticates a user
      parameters:
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Authenticate a user
      tags:
      - auth
  /user:
    post:
      consumes:
      - application/json
      description: CreateUser creates a new user
      parameters:
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /user/{user_id}:
    delete:
      consumes:
      - application/json
      description: DeleteUser deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: GetUser returns a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repositories.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: UpdateUser updates an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: GetUsers returns all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repositories.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
